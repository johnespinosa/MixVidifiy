document.getElementById('startButton').addEventListener('click', async () => {
    const imageInput = document.getElementById('imageInput');
    const audioInput = document.getElementById('audioInput');

    if (!imageInput.files[0] || !audioInput.files[0]) {
        alert('Please upload an image and an audio file.');
        return;
    }

    const imageFile = imageInput.files[0];
    const audioFile = audioInput.files[0];

    // Set up canvas and context
    const canvas = document.createElement('canvas');
    canvas.width = 1920; // Full HD width
    canvas.height = 1080; // Full HD height
    const ctx = canvas.getContext('2d');

    // Load image
    const image = new Image();
    image.src = URL.createObjectURL(imageFile);

    image.onload = () => {
        // Calculate duration and frame rate
        const fps = 30; // Frames per second
        const audio = new Audio(URL.createObjectURL(audioFile));
        audio.addEventListener('loadedmetadata', () => {
            const audioDuration = audio.duration; // Audio length in seconds
            const totalFrames = Math.floor(audioDuration * fps);

            // Prepare MediaRecorder for video encoding
            const stream = canvas.captureStream(fps);
            const mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm; codecs=vp8' });
            const videoChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) videoChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                const videoBlob = new Blob(videoChunks, { type: 'video/webm' });
                const videoUrl = URL.createObjectURL(videoBlob);

                // Display video preview
                const videoElement = document.getElementById('preview');
                videoElement.src = videoUrl;
                videoElement.style.display = 'block';
                videoElement.controls = true;

                // Download the video
                const downloadLink = document.createElement('a');
                downloadLink.href = videoUrl;
                downloadLink.download = 'generated_video.webm';
                downloadLink.textContent = 'Download Video';
                document.body.appendChild(downloadLink);
            };

            // Start recording
            mediaRecorder.start();

            // Render frames
            let currentFrame = 0;

            function renderFrame() {
                if (currentFrame >= totalFrames) {
                    mediaRecorder.stop();
                    return;
                }

                // Draw image and watermark on canvas
                ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
                addWatermark(ctx, canvas.width, canvas.height);

                // Move to the next frame
                currentFrame++;
                requestAnimationFrame(renderFrame);
            }

            renderFrame();
        });
    };
});

// Add a watermark to the canvas
function addWatermark(ctx, canvasWidth, canvasHeight) {
    const watermarkText = "Generated by YourPlatform";
    ctx.font = "30px Arial";
    ctx.fillStyle = "rgba(255, 255, 255, 0.7)"; // Semi-transparent white
    ctx.textAlign = "right";
    ctx.fillText(watermarkText, canvasWidth - 20, canvasHeight - 20);
}
